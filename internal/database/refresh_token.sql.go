// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_token.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addRefreshToken = `-- name: AddRefreshToken :exec
INSERT INTO refresh_tokens (token, user_id)
VALUES ($1, $2)
`

type AddRefreshTokenParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) AddRefreshToken(ctx context.Context, arg AddRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, addRefreshToken, arg.Token, arg.UserID)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT user_id
FROM refresh_tokens
WHERE (token = $1 AND expires_at>CURRENT_TIMESTAMP AND revoked_at IS NULL)
LIMIT 1
`

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, token)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET revoked_at = CURRENT_TIMESTAMP
WHERE token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}
