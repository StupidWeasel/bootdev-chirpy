// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, hashed_password)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, email, hashed_password, password_reset_required, is_chirpy_red
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordResetRequired,
		&i.IsChirpyRed,
	)
	return i, err
}

const loginUser = `-- name: LoginUser :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red
FROM users
WHERE (email = $1)
LIMIT 1
`

type LoginUserRow struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	HashedPassword string
	IsChirpyRed    bool
}

func (q *Queries) LoginUser(ctx context.Context, email string) (LoginUserRow, error) {
	row := q.db.QueryRowContext(ctx, loginUser, email)
	var i LoginUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const userUpdateSelf = `-- name: UserUpdateSelf :one
UPDATE users
SET email = $2, hashed_password = $3
WHERE id = $1
Returning id, created_at, updated_at, email, hashed_password, password_reset_required, is_chirpy_red
`

type UserUpdateSelfParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
}

func (q *Queries) UserUpdateSelf(ctx context.Context, arg UserUpdateSelfParams) (User, error) {
	row := q.db.QueryRowContext(ctx, userUpdateSelf, arg.ID, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordResetRequired,
		&i.IsChirpyRed,
	)
	return i, err
}

const userUpgradeToRed = `-- name: UserUpgradeToRed :execrows
Update users
SET is_chirpy_red = TRUE
WHERE id = $1
`

func (q *Queries) UserUpgradeToRed(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, userUpgradeToRed, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const usersClear = `-- name: UsersClear :exec
TRUNCATE users, messages, refresh_tokens
`

func (q *Queries) UsersClear(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, usersClear)
	return err
}
